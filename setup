#!/bin/bash
# Paste the entire script below at https://argbash.io/generate to create the command line parser
# ARG_OPTIONAL_SINGLE([project-name],[p],[the GCP project name to use for this invocation])
# ARG_OPTIONAL_SINGLE([cluster-name-prefix],[c],[the prefix to be used to generate the name of the cluster])
# ARG_OPTIONAL_SINGLE([number-of-clusters],[n],[the number of the clusters to create],[1])
# ARG_OPTIONAL_SINGLE([machine-type],[t],[the type of machine],[g1-small])
# ARG_OPTIONAL_SINGLE([disk-size],[d],[the size of the disk (in GB)],[50])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.6.1 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info
# Generated online by https://argbash.io/generate

die()
{
  local _ret=$2
  test -n "$_ret" || _ret=1
  test "$_PRINT_HELP" = yes && print_help >&2
  echo "$1" >&2
  exit ${_ret}
}

begins_with_short_option()
{
  local first_option all_short_options
  all_short_options='pcntd'
  first_option="${1:0:1}"
  test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}



# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_project_name=
_arg_cluster_name_prefix=
_arg_number_of_clusters="1"
_arg_machine_type="g1-small"
_arg_disk_size="50"

print_help ()
{
  printf 'Usage: %s [-p|--project-name <arg>] [-c|--cluster-name-prefix <arg>] [-n|--number-of-clusters <arg>] [-t|--machine-type <arg>] [-d|--disk-size <arg>]\n' "$0"
  printf '\t%s\n' "-p,--project-name: the GCP project name to use for this invocation (no default)"
  printf '\t%s\n' "-c,--cluster-name-prefix: the prefix to be used to generate the name of the cluster (no default)"
  printf '\t%s\n' "-n,--number-of-clusters: the number of the clusters to create (default: '1')"
  printf '\t%s\n' "-t,--machine-type: the type of machine (default: 'g1-small')"
  printf '\t%s\n' "-d,--disk-size: the size of the disk (in GB) (default: '50')"
}

parse_commandline ()
{
  while test $# -gt 0
  do
    _key="$1"
    case "$_key" in
      -p|--project-name)
        test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
        _arg_project_name="$2"
        shift
        ;;
      --project-name=*)
        _arg_project_name="${_key##--project-name=}"
        ;;
      -p*)
        _arg_project_name="${_key##-p}"
        ;;
      -c|--cluster-name-prefix)
        test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
        _arg_cluster_name_prefix="$2"
        shift
        ;;
      --cluster-name-prefix=*)
        _arg_cluster_name_prefix="${_key##--cluster-name-prefix=}"
        ;;
      -c*)
        _arg_cluster_name_prefix="${_key##-c}"
        ;;
      -n|--number-of-clusters)
        test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
        _arg_number_of_clusters="$2"
        shift
        ;;
      --number-of-clusters=*)
        _arg_number_of_clusters="${_key##--number-of-clusters=}"
        ;;
      -n*)
        _arg_number_of_clusters="${_key##-n}"
        ;;
      -t|--machine-type)
        test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
        _arg_machine_type="$2"
        shift
        ;;
      --machine-type=*)
        _arg_machine_type="${_key##--machine-type=}"
        ;;
      -t*)
        _arg_machine_type="${_key##-t}"
        ;;
      -d|--disk-size)
        test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
        _arg_disk_size="$2"
        shift
        ;;
      --disk-size=*)
        _arg_disk_size="${_key##--disk-size=}"
        ;;
      -d*)
        _arg_disk_size="${_key##-d}"
        ;;
      *)
        _PRINT_HELP=yes die "FATAL ERROR: Got an unexpected argument '$1'" 1
        ;;
    esac
    shift
  done
}

parse_commandline "$@"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash


if [ -z "${_arg_project_name}" ] || [ -z "${_arg_cluster_name_prefix}" ]; then
  print_help
  die "Missing required parameters" 1
fi

echo "Spinning up ${_arg_number_of_clusters} clusters. This will take a few minutes..."

scopes="storage-ro,logging-write,monitoring,service-control,service-management,trace"

for cluster_index in $(seq 1 "${_arg_number_of_clusters}")
do
  cluster_name="${_arg_cluster_name_prefix}-${cluster_index}"
  gcloud beta container \
      --project "${_arg_project_name}" clusters create "${cluster_name}" \
      --zone "us-central1-a" \
      --no-enable-basic-auth \
      --cluster-version "1.13.5-gke.10" \
      --machine-type "${_arg_machine_type}" \
      --image-type "COS" \
      --disk-type "pd-standard" \
      --disk-size "${_arg_disk_size}" \
      --scopes "${scopes}", \
      --num-nodes "1" \
      --no-enable-cloud-logging \
      --no-enable-cloud-monitoring \
      --no-enable-ip-alias \
      --network "projects/${_arg_project_name}/global/networks/default" \
      --subnetwork "projects/${_arg_project_name}/regions/us-central1/subnetworks/default" \
      --addons HorizontalPodAutoscaling,HttpLoadBalancing \
      --enable-autoupgrade \
      --enable-autorepair \
      --enable-autoscaling \
      --max-nodes=3 \
      --min-nodes=1 \
      &
done

wait

for cluster_index in $(seq 1 "${_arg_number_of_clusters}")
do
  cluster_name="${_arg_cluster_name_prefix}-${cluster_index}"
  KUBECONFIG="${HOME}/.gocd-demo/${_arg_cluster_name_prefix}/${cluster_index}/kube/config"

  mkdir -p "$(dirname "${KUBECONFIG}")"
  KUBECONFIG=${KUBECONFIG} gcloud container clusters get-credentials "${cluster_name}"
done

for cluster_index in $(seq 1 "${_arg_number_of_clusters}")
do
  cluster_name="${_arg_cluster_name_prefix}-${cluster_index}"
  KUBECONFIG="${HOME}/.gocd-demo/${_arg_cluster_name_prefix}/${cluster_index}/kube/config"

  # setup the kubernetes dashboard
  kubectl --kubeconfig="${KUBECONFIG}" \
    apply -f https://raw.githubusercontent.com/kubernetes/dashboard/master/aio/deploy/recommended/kubernetes-dashboard.yaml

  # setup the clusterconfig role
  kubectl --kubeconfig="${KUBECONFIG}" \
    create clusterrolebinding clusterRoleBinding \
    --clusterrole=cluster-admin \
    --serviceaccount=kube-system:default

  helm --kubeconfig="${KUBECONFIG}" init --history-max 200
done

# ] <-- needed because of Argbash

