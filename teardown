#!/bin/bash
# Paste the entire script below at https://argbash.io/generate to create the command line parser
# ARG_OPTIONAL_SINGLE([project-name],[p],[the GCP project name to use for this invocation])
# ARG_OPTIONAL_SINGLE([cluster-name-prefix],[c],[the prefix to be used to generate the name of the cluster])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.6.1 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info
# Generated online by https://argbash.io/generate

die()
{
	local _ret=$2
	test -n "$_ret" || _ret=1
	test "$_PRINT_HELP" = yes && print_help >&2
	echo "$1" >&2
	exit ${_ret}
}

begins_with_short_option()
{
	local first_option all_short_options
	all_short_options='pc'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}



# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_project_name=
_arg_cluster_name_prefix=

print_help ()
{
	printf 'Usage: %s [-p|--project-name <arg>] [-c|--cluster-name-prefix <arg>]\n' "$0"
	printf '\t%s\n' "-p,--project-name: the GCP project name to use for this invocation (no default)"
	printf '\t%s\n' "-c,--cluster-name-prefix: the prefix to be used to generate the name of the cluster (no default)"
}

parse_commandline ()
{
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-p|--project-name)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_project_name="$2"
				shift
				;;
			--project-name=*)
				_arg_project_name="${_key##--project-name=}"
				;;
			-p*)
				_arg_project_name="${_key##-p}"
				;;
			-c|--cluster-name-prefix)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_cluster_name_prefix="$2"
				shift
				;;
			--cluster-name-prefix=*)
				_arg_cluster_name_prefix="${_key##--cluster-name-prefix=}"
				;;
			-c*)
				_arg_cluster_name_prefix="${_key##-c}"
				;;
			*)
				_PRINT_HELP=yes die "FATAL ERROR: Got an unexpected argument '$1'" 1
				;;
		esac
		shift
	done
}

parse_commandline "$@"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash

function info() {
  printf "\033[1;34m[INFO]\033[0m ${1}\n"
}

function warn() {
  printf "\033[1;33m[WARN]\033[0m ${1}\n"
}

function error() {
  printf "\033[1;31m[ERROR]\033[0m ${1}\n"
}

if [ -z "${_arg_project_name}" ] || [ -z "${_arg_cluster_name_prefix}" ]; then
	print_help
	die "Missing required parameters" 1
fi

SSH_CONSOLE_INSTANCE_NAME="${_arg_cluster_name_prefix}-ssh-console"

info "Terminating ssh console instance ${SSH_CONSOLE_INSTANCE_NAME}"

# rm -rf "${HOME}/.gocd-demo/${_arg_cluster_name_prefix}"

gcloud --quiet \
  compute --project "${_arg_project_name}" instances delete "${SSH_CONSOLE_INSTANCE_NAME}" \
	--zone us-central1-a &

info "Terminating clusters with prefix ${_arg_cluster_name_prefix}. This may take a few minutes..."

clusters=$(gcloud beta container \
	--project "${_arg_project_name}" clusters list \
	--zone us-central1-a \
	--filter "name:${_arg_cluster_name_prefix}-user-*" \
	--format "get(name)" | tr "\n" " ")

gcloud --quiet \
	beta container \
	--project "${_arg_project_name}" clusters delete ${clusters} &

wait

# ] <-- needed because of Argbash
